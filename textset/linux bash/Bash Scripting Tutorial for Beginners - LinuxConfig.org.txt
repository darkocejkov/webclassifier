Execute   command without any arguments to instantly navigate to your user home directory from any location. Execute   to toggle between your last two visited locations. In what directory you end up after executing   and   commands? Regardless of the script complexity, do not attempt to write your entire script in one go. Slowly develop your script by testing each core line by executing it first on the terminal command line. When successful, transfer it to your shell script. Enter   command to learn more about all   command line options used within the previous   script. Try to run the   command without   option prefix! Does it work? Never name your private variables using UPPERCASE characters. This is because uppercase variable names are reserved for  , and you run a risk of overwriting them. This may lead to the dysfunctional or misbehaving script execution.  When unsure whether your command produced   or   try to redirect its output. For example, if you are able to redirect its output successfully to a file with   notation, it means that your command produced  . Conversely, successfully redirecting command output with   notation is indicating that your command produced  .  The moment you notice that your script contains two lines of the same code, you may consider to enact a function instead.  Read manual pages, if you wish to learn more about  ,   and   command's options used by our   bash script. Example:    Comparing strings with integers using numeric comparison operators will result in the error:  . When comparing values, you may want to use   command first to confirm that your variables hold expected values before using them as part of the comparison operation.  Can you rewrite the if_else.sh script to reverse the logic of its execution in a way that the else block gets executed if the variable   is less than variable  ? Check bash manual page with   command for more information about  ,   and other bash options. Currently, the default storage directory is  . Perhaps the script could be more flexible? Can you think of a way to use positional parameter   to let the user to decide on which directory to use to store the resulting backup file?  Rewrite the above character count for loop to print names of all files and directories inside your current working directory along with the number of characters each file and directory name consists from. The for loop output should look similar to:
 
 The current script does not check for the existence of user directories prior to the backup function execution. This can lead to unforeseen consequences. Do you think that you would be able to create your own improved copy of the backup script by defining a separate loop to check the existence of all user directories before the backup for loop is reached? You for loop will exit the script's execution if any of the user directories on the supplied list does not exist. Can you use the arithmetic expansion to perform a modulus operation? For example what is the result of modulus operation  ? Experiment with the backup.sh script. The script is far from being perfect, add new features or fix current features. Do not be afraid to break things as that is perfectly normal. Troubleshooting and fixing code is perhaps the best booster for you to enhance your understanding of bash scripting and to improve your ability to script beyond what has been discussed in this tutorial.  