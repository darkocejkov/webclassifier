
        The Python programming language
       GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together. 
                  Use Git or checkout with SVN using the web URL.
                 If nothing happens,   and try again. If nothing happens,   and try again. If nothing happens,   and try again. If nothing happens,   and try again. Copyright (c) 2001-2020 Python Software Foundation.  All rights reserved. See the end of this file for further copyright and license information. Contents For more complete instructions on contributing to CPython development,
see the  . Installable Python kits, and information about using Python, are available at
 . On Unix, Linux, BSD, macOS, and Cygwin: This will install Python as  . You can pass many options to the configure script; run  
to find out more.  On macOS case-insensitive file systems and on Cygwin,
the executable is called  ; elsewhere it's just  . Building a complete Python installation requires the use of various
additional third-party libraries, depending on your build platform and
configure options.  Not all standard library modules are buildable or
useable on all platforms.  Refer to the
 
section of the   for current detailed information on
dependencies for various Linux distributions and macOS. On macOS, there are additional configure and build options related
to macOS framework and universal builds.  Refer to  . On Windows, see  . If you wish, you can create a subdirectory and invoke configure from there.
For example: (This will fail if you   built at the top-level directory.  You should do
a   at the top-level first.) To get an optimized build of Python,  
before you run  .  This sets the default make targets up to enable
Profile Guided Optimization (PGO) and may be used to auto-enable Link Time
Optimization (LTO) on some platforms.  For more details, see the sections
below. PGO takes advantage of recent versions of the GCC or Clang compilers.  If used,
either via   or by manually running
  regardless of configure flags, the optimized build
process will perform the following steps: The entire Python directory is cleaned of temporary files that may have
resulted from a previous compilation. An instrumented version of the interpreter is built, using suitable compiler
flags for each flavour. Note that this is just an intermediary step.  The
binary resulting from this step is not good for real life workloads as it has
profiling instructions embedded inside. After the instrumented interpreter is built, the Makefile will run a training
workload.  This is necessary in order to profile the interpreter execution.
Note also that any output, both stdout and stderr, that may appear at this step
is suppressed. The final step is to build the actual interpreter, using the information
collected from the instrumented one.  The end result will be a Python binary
that is optimized; suitable for distribution or production installation. Enabled via configure's   flag.  LTO takes advantage of the
ability of recent compiler toolchains to optimize across the otherwise
arbitrary   file boundary when building final executables or shared
libraries for additional performance gains. We have a comprehensive overview of the changes in the   document.  For a more
detailed change log, read  , but a full
accounting of changes can only be gleaned from the  . If you want to install multiple versions of Python, see the section below
entitled "Installing multiple versions".  is online,
updated daily. It can also be downloaded in many formats for faster access.  The documentation
is downloadable in HTML, PDF, and reStructuredText formats; the latter version
is primarily for documentation authors, translators, and people with special
formatting requirements. For information about building Python's documentation, refer to  . Significant backward incompatible changes were made for the release of Python
3.0, which may cause programs written for Python 2 to fail when run with Python
3.  For more information about porting your code from Python 2 to Python 3, see
the  . To test the interpreter, type   in the top-level directory.  The
test set produces some output.  You can generally ignore the messages about
skipped tests due to optional features which can't be imported.  If a message
is printed about a failed test or a traceback or core dump is produced,
something is wrong. By default, tests are prevented from overusing resources like disk space and
memory.  To enable these tests, run  . If any tests fail, you can re-run the failing test(s) in verbose mode.  For
example, if   and   failed, you can run: If the failure persists and appears to be a problem with Python rather than
your environment, you can   and
include relevant output from that command to show the issue. See  
for more on running tests. On Unix and Mac systems if you intend to install multiple versions of Python
using the same installation prefix (  argument to the configure
script) you must take care that your primary python executable is not
overwritten by the installation of a different version.  All files and
directories installed using   contain the major and minor
version and can thus live side-by-side.    also creates
  which refers to  .  If you
intend to install multiple versions using the same prefix you must decide which
version (if any) is your "primary" version.  Install that version using  .  Install all other versions using  . For example, if you want to install Python 2.7, 3.6, and 3.10 with 3.10 being the
primary version, you would execute   in your 3.10 build directory
and   in the others. Bug reports are welcome!  You can use the   to report bugs, and/or submit pull requests  . You can also follow development discussion on the  . If you have a proposal to change Python, you may want to send an email to the
comp.lang.python or   mailing lists for initial feedback.  A
Python Enhancement Proposal (PEP) may be submitted if your idea gains ground.
All current PEPs, as well as guidelines for submitting a new PEP, are listed at
 . See   for Python 3.9 release details. Copyright (c) 2001-2020 Python Software Foundation.  All rights reserved. Copyright (c) 2000 BeOpen.com.  All rights reserved. Copyright (c) 1995-2001 Corporation for National Research Initiatives.  All
rights reserved. Copyright (c) 1991-1995 Stichting Mathematisch Centrum.  All rights reserved. See the file "LICENSE" for information on the history of this software, terms &
conditions for usage, and a DISCLAIMER OF ALL WARRANTIES. This Python distribution contains   GNU General Public License (GPL) code,
so it may be used in proprietary projects.  There are interfaces to some GNU
code but these are entirely optional. All trademarks referenced herein are property of their respective holders. 
      The Python programming language
     