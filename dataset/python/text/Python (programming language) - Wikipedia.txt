
  is an  ,  ,    . Created by   and first released in 1991, Python's design philosophy emphasizes   with its notable use of  . Its   and   approach aim to help   write clear, logical code for small and large-scale projects. 
 Python is   and  . It supports multiple  , including   (particularly,  ),  , and  . Python is often described as a "batteries included" language due to its comprehensive  . 
 Python was conceived in the late 1980s as a successor to the  . Python 2.0, released in 2000, introduced features like   and a garbage collection system with  .
 Python 3.0, released in 2008, was a major revision of the language that is not completely  , and much Python 2 code does not run unmodified on Python 3.
 The Python 2 language was officially discontinued in 2020 (first planned for 2015), and "Python 2.7.18 is the last Python 2.7 release and therefore the last Python 2 release."  No more security patches or other improvements will be released for it.  With Python 2's  , only  Python 3.5.x  and later are supported.
 Python   are available for many  . A global community of programmers develops and maintains  , a    . A non-profit organization, the  , manages and directs resources for Python and CPython development.
 Python was conceived in the late 1980s  by   at   (CWI) in the   as a successor to the   (itself inspired by  ),  capable of   and interfacing with the   operating system.  Its implementation began in December 1989.  Van Rossum shouldered sole responsibility for the project, as the lead developer, until 12 July 2018, when he announced his "permanent vacation" from his responsibilities as Python's  , a title the Python community bestowed upon him to reflect his long-term commitment as the project's chief decision-maker.  He now shares his leadership as a member of a five-person steering council.  In January 2019, active Python core developers elected Brett Cannon, Nick Coghlan, Barry Warsaw, Carol Willing and Van Rossum to a five-member "Steering Council" to lead the project. 
 Python 2.0 was released on 16 October 2000 with many major new features, including a     and support for  . 
 Python 3.0 was released on 3 December 2008. It was a major revision of the language that is not completely  .  Many of its major features were   to Python 2.6.x  and 2.7.x version series.  Releases of Python 3 include the   utility, which automates (at least partially) the translation of Python 2 code to Python 3. 
 Python 2.7's   date was initially set at 2015 then postponed to 2020 out of concern that a large body of existing code could not easily be forward-ported to Python 3. 
 Python is a  .   and   are fully supported, and many of its features support   and   (including by   and   (magic methods)).  Many other paradigms are supported via extensions, including   and  . 
 Python uses   and a combination of   and a cycle-detecting garbage collector for  .  It also features dynamic   ( ), which binds method and variable names during program execution.
 Python's design offers some support for   in the   tradition. It has  ,  , and   functions;  ,  , sets, and   expressions.  The standard library has two modules (itertools and functools) that implement functional tools borrowed from   and  . 
 The language's core philosophy is summarized in the document   ( ), which includes   such as: 
 Rather than having all of its functionality built into its core, Python was designed to be highly  . This compact modularity has made it particularly popular as a means of adding programmable interfaces to existing applications. Van Rossum's vision of a small core language with a large standard library and easily extensible interpreter stemmed from his frustrations with  , which espoused the opposite approach. 
 Python strives for a simpler, less-cluttered syntax and grammar while giving developers a choice in their coding methodology. In contrast to  's " " motto, Python embraces a "there should be one—and preferably only one—obvious way to do it" design philosophy.   , a Fellow at the Python Software Foundation and Python book author, writes that "To describe something as 'clever' is   considered a compliment in the Python culture." 
 Python's developers strive to avoid  , and reject patches to non-critical parts of the   reference implementation that would offer marginal increases in speed at the cost of clarity.  When speed is important, a Python programmer can move time-critical functions to extension modules written in languages such as C, or use  , a  .   is also available, which translates a Python script into C and makes direct C-level API calls into the Python interpreter.
 An important goal of Python's developers is keeping it fun to use. This is reflected in the language's name—a tribute to the British comedy group  —and in occasionally playful approaches to tutorials and reference materials, such as examples that refer to spam and eggs (from a  ) instead of the standard  . 
 A common   in the Python community is  , which can have a wide range of meanings related to program style. To say that code is pythonic is to say that it uses Python idioms well, that it is natural or shows fluency in the language, that it conforms with Python's minimalist philosophy and emphasis on readability. In contrast, code that is difficult to understand or reads like a rough transcription from another programming language is called  .
 Users and admirers of Python, especially those considered knowledgeable or experienced, are often referred to as  . 
 Python is meant to be an easily readable language. Its formatting is visually uncluttered, and it often uses English keywords where other languages use punctuation. Unlike many other languages, it does not use   to delimit blocks, and semicolons after statements are optional. It has fewer syntactic exceptions and special cases than   or  . 
 Python uses   indentation, rather than   or keywords, to delimit  . An increase in indentation comes after certain statements; a decrease in indentation signifies the end of the current block.  Thus, the program's visual structure accurately represents the program's semantic structure.  This feature is sometimes termed the  , which some other languages share, but in most languages indentation doesn't have any semantic meaning.
 Python's   include (among others):
 Python does not support   optimization or  , and, according to Guido van Rossum, it never will.  However, better support for  -like functionality is provided in 2.5, by extending Python's  .  Before 2.5, generators were    ; information was passed unidirectionally out of the generator. From Python 2.5, it is possible to pass information back into a generator function, and from Python 3.3, the information can be passed through multiple stack levels. 
 Some Python   are similar to languages such as   and  , while some are not:
 In Python, a distinction between expressions and statements is rigidly enforced, in contrast to languages such as  ,  , or  . This leads to duplicating some functionality. For example:
 Statements cannot be a part of an expression, so list and other comprehensions or  , all being expressions, cannot contain statements. A particular case of this is that an assignment statement such as   cannot form part of the conditional expression of a conditional statement. This has the advantage of avoiding a classic C error of mistaking an assignment operator   for an equality operator   in conditions:   is syntactically valid (but probably unintended) C code but   causes a syntax error in Python.
  on objects are   attached to the object's class; the syntax   is, for normal methods and functions,   for  . Python methods have an explicit   parameter to access  , in contrast to the implicit   (or  ) in some other object-oriented programming languages (e.g.,  ,  ,  , or  ). 
 Python uses   and has typed objects but untyped variable names. Type constraints are not checked at  ; rather, operations on an object may fail, signifying that the given object is not of a suitable type. Despite being  , Python is  , forbidding operations that are not well-defined (for example, adding a number to a string) rather than silently attempting to make sense of them.
 Python allows programmers to define their own types using  , which are most often used for  . New   of classes are constructed by calling the class (for example,   or  ), and the classes are instances of the     (itself an instance of itself), allowing   and  .
 Before version 3.0, Python had two kinds of classes:   and  .  The syntax of both styles is the same, the difference being whether the class   is inherited from, directly or indirectly (all new-style classes inherit from   and are instances of  ). In versions of Python 2 from Python 2.2 onwards, both kinds of classes can be used. Old-style classes were eliminated in Python 3.0.
 The long term plan is to support   and from Python 3.5, the syntax of the language allows specifying static types but they are not checked in the default implementation, CPython. An experimental optional static type checker named   supports compile-time type checking. 
 
 
 Python has the usual symbols for arithmetic operators ( ,  ,  ,  ), the floor division operator   and the     (where the remainder can be negative,  e.g.  ). It also has   for  , e.g.   and  , and a matrix multiply operator   .  These operators work like in traditional math; with the same  , the operators   (   and   can also be   to represent positive and negative numbers respectively).
 Division between integers produces floating point results. The behavior of division has changed significantly over time: 
 In Python terms,   is   (or simply  ), and   is     before version 3.0 is  . 
 Rounding towards negative infinity, though different from most languages, adds consistency. For instance, it means that the equation   is always true. It also means that the equation   is valid for both positive and negative values of  . However, maintaining the validity of this equation means that while the result of   is, as expected, in the   [0,  ), where   is a positive integer, it has to lie in the interval ( , 0] when   is negative. 
 Python provides a   function for   a float to the nearest integer. For  , Python 3 uses  :   and   both produce  .  Versions before 3 used  :   is  ,   is  . 
 Python allows boolean expressions with multiple equality relations in a manner that is consistent with general use in mathematics. For example, the expression   tests whether   is less than   and   is less than  .   C-derived languages interpret this expression differently: in C, the expression would first evaluate  , resulting in 0 or 1, and that result would then be compared with  . 
 Python uses   for all integer operations. The   type/class in the   module provides decimal floating point numbers to a pre-defined arbitrary precision and several rounding modes.  The   class in the   module provides arbitrary precision for  . 
 Due to Python's extensive mathematics library, and the third-party library   that further extends the native capabilities, it is frequently used as a scientific scripting language to aid in problems such as numerical data processing and manipulation. 
  program:
 Program to calculate the   of a positive integer:
 
 Python's large  , commonly cited as one of its greatest strengths,  provides tools suited to many tasks. For Internet-facing applications, many standard formats and protocols such as   and   are supported. It includes modules for creating  , connecting to  ,  , arithmetic with arbitrary-precision decimals,  manipulating  , and  .
 Some parts of the standard library are covered by specifications (for example, the   (WSGI) implementation   follows PEP 333 ), but most modules are not. They are specified by their code, internal documentation, and  . However, because most of the standard library is cross-platform Python code, only a few modules need altering or rewriting for variant implementations.
 As of November 2019,  the   (PyPI), the official repository for third-party Python software, contains over 200,000  packages with a wide range of functionality, including:
 Most Python implementations (including CPython) include a   (REPL), permitting them to function as a   for which the user enters statements sequentially and receives results immediately.
 Other shells, including   and  , add further abilities such as improved auto-completion, session state retention and  .
 As well as standard desktop  , there are  -based IDEs;   (intended for developing science and math-related Python programs);  , a browser-based IDE and hosting environment; and Canopy IDE, a commercial Python IDE emphasizing  . 
  is the   of Python. It is written in  , meeting the   standard with several select   features.  It compiles Python programs into an intermediate   which is then executed by its  .  CPython is distributed with a large standard library written in a mixture of C and native Python. It is available for many platforms, including   (Vista and later; supported   and older, with by now unsupported Python 2.7) and most modern   systems. Platform portability was one of its earliest priorities,  in Python 1 and 2 time-frame, even supporting   and  , while since support has been dropped for a lot of platforms.
  is a fast, compliant interpreter of Python 2.7 and 3.6.  Its   brings a significant speed improvement over CPython but several libraries written in C cannot be used with it. 
  is a significant fork of CPython that implements  ; it does not use the C memory stack, thus allowing massively concurrent programs. PyPy also has a stackless version. 
  and   are Python 3 variants optimized for  . This includes  . 
 Other just-in-time Python compilers have been developed, but are now unsupported:
 In 2005,   released a Python interpreter for the   mobile phones named  . It includes many of the modules from the CPython implementations and some additional modules to integrate with the   operating system. The project has been kept up-to-date to run on all variants of the S60 platform, and several third-party modules are available. The Nokia   also supports Python with   widget libraries, enabling programs to be written and run on the target device. 
 There are several compilers to high-level  , with either unrestricted Python, a restricted subset of Python, or a language similar to Python as the source language:
 A performance comparison of various Python implementations on a non-numerical (combinatorial) workload was presented at EuroSciPy '13.  Python's performance compared to other programming languages has also been benchmarked by  . 
 Python's development is conducted largely through the   (PEP) process, the primary mechanism for proposing major new features, collecting community input on issues and documenting Python design decisions.  Python coding style is covered in PEP 8.  Outstanding PEPs are reviewed and commented on by the Python community and the steering council. 
 Enhancement of the language corresponds with development of the CPython reference implementation. The mailing list python-dev is the primary forum for the language's development. Specific issues are discussed in the     hosted at  .  Development originally took place on a   source-code repository running  , until Python moved to   in January 2017. 
 CPython's public releases come in three types, distinguished by which part of the version number is incremented:
 Python 3.9 alpha1 was announced in November 2019  and with the adoption of a new yearly release cadence,  the first release of 3.9 is slated for November 2020. 
 Many   are also released as previews and for testing before final releases. Although there is a rough schedule for each release, they are often delayed if the code is not ready. Python's development team monitors the state of the code by running the large   suite during development, and using the     system. 
 The major   on Python is  . There are also special Python mentoring programmes, such as  .
 Python's name is derived from the British comedy group  , whom Python creator Guido van Rossum enjoyed while developing the language. Monty Python references appear frequently in Python code and culture;  for example, the   often used in Python literature are   instead of the traditional  .  The official Python documentation also contains various references to Monty Python routines. 
 The prefix   is used to show that something is related to Python. Examples of the use of this prefix in names of Python applications or libraries include  , a   of   to Python (commonly used to create games);   and  , which bind   and   to Python respectively; and  , a Python implementation originally written in Python.
 Python API documentation generators include:
 Since 2003, Python has consistently ranked in the top ten most popular programming languages in the   where, as of February 2020 , it is the third most popular language (behind  , and  ).  It was selected Programming Language of the Year in 2007, 2010, and 2018. 
 An empirical study found that scripting languages, such as Python, are more productive than conventional languages, such as C and Java, for programming problems involving string manipulation and search in a dictionary, and determined that memory consumption was often "better than Java and not much worse than C or C++". 
 Large organizations that use Python include  ,  ,   ,   ,   ,   ,   ,  ,    and some smaller entities like   and  .  The social news networking site   is written entirely in Python. 
 Python can serve as a   for  , e.g., via   for the  .  With  , a standard API has evolved to facilitate these applications.   like  ,  ,  ,  ,  ,  ,  ,   and   support developers in the design and maintenance of complex applications.   and   can be used to develop the client-side of Ajax-based applications.   can be used as   to a relational database.   is a framework to program communications between computers, and is used (for example) by  .
 Libraries such as  ,   and   allow the effective use of Python in  ,  with specialized libraries such as   and   providing domain-specific functionality.   is a   with a   programmable in Python: its library covers many aspects of  , including  ,  ,  ,  , and  . 
 Python has been successfully embedded in many software products as a scripting language, including in   software such as  , 3D parametric modeler like  , 3D animation packages such as  ,  ,  ,  ,  ,  ,  ,  ,  , the visual effects compositor  , 2D imaging programs like  ,   ,   and  ,  and   programs like   and  .   uses Python as a   to show complex structures such as C++ containers.   promotes Python as the best choice for writing scripts in  .  It has also been used in several video games,  and has been adopted as first of the three available   in  , the other two being   and  . 
 Python is commonly used in   projects and machine learning projects with the help of libraries like  ,  ,   and  .  As a scripting language with  , simple syntax and rich text processing tools, Python is often used for  . 
 Many operating systems include Python as a standard component. It ships with most  ,    (using Python 2.7),   (as a package),  ,   (as a package) and   and can be used from the command line (terminal). Many Linux distributions use installers written in Python:   uses the   installer, while   and   use the   installer.   uses Python in its  ,  .
 Python is used extensively in the   industry, including in exploit development. 
 Most of the   software for the   XO, now developed at  , is written in Python.  The     project has adopted Python as its main user-programming language.
  includes Python, and intends to replace Java with Python. Its Python Scripting Provider is a core feature  since Version 4.0 from 7 February 2013.
 Python's design and philosophy have influenced many other programming languages:
 Python's development practices have also been emulated by other languages. For example, the practice of requiring a document describing the rationale for, and issues surrounding, a change to the language (in Python, a PEP) is also used in  ,   ,  and Swift. 
 
 